Priori: No PostgreSQL temos apenas uma ENGINE para lidar com os DB, nomeada:
"MVCC" (utilizada para cuidar da consistência de dados quando múltiplos
processos estão acessando a mesma tabela).
Enquanto isso, o MySQL usa 9 STORAGE ENGINES, inclusive uma para ser compatível
com chave estrangeira, o que não precisamos incluir no Postgres.

É necessário relembrar das Classificações de Comando, mais especificamente das
Transações. Visualizar arquivo: "2. Classificações..."

1. No 1º exemplo, vamos utilizar as entidades: "Gafanhoto" e "Curso", com o
relacionamento <PREFERE>. A CARDINALIDADE é de um-para-muitos (Visualizar
arquivo: "13. Modelo..." para regra de CARDINALIDADE).
ALTER TABLE IF EXISTS gafanhotos
ADD COLUMN IF NOT EXISTS cursopreferido int4;

2. Incluindo a chave estrangeira na entidade: "Gafanhotos"
ALTER TABLE gafanhotos
ADD CONSTRAINT chave_estrangeira FOREIGN KEY (cursopreferido)
REFERENCES cursos (id);

3. Populando o atributo novo
UPDATE gafanhotos
-- O meu aluno Daniel vai gostar do MySQL
set cursopreferido = 6 where id = 1;

4. Entre no PgAdmin4 e popule a coluna cursopreferido
Não sabe? Verifique o arquivo: 'Brincando com PgAdmin'

5. Integridade Referencial
DELETE FROM cursos
WHERE id = 6;
-- O que ocorrerá quando tentarmos excluir um curso que é predileto por alguém?
-- Ele não irá deletar porque está assimilado a um OBJETO/INSTÂNCIA existente e
-- a transação geraria inconsistência (ACID), para excluirmos devemos remover a
-- relação para então excluir.

6. Buscando os dados da FK:
SELECT gafanhotos.nome, cursos.nome, cursos.ano
FROM gafanhotos INNER JOIN cursos  -- ou apenas join
-- Chave primária /// Chave estrangeira
ON (cursos.id = gafanhotos.cursopreferido);
-- Selecione qual o curso preferido pelo user 1, 2...

Claúsulas Importantes: Sempre que usar o JOIN, lembre-se do ON
Inner Join: Contém apenas as relações/O que tem relação nas duas tabelas. Vai
focar nos objetos que se interligam com a outra tabela.

7. Ordenando por nome
SELECT g.nome, c.nome, c.ano
FROM gafanhotos g JOIN cursos c  -- ou INNER JOIN
ON (c.id = g.cursopreferido)
ORDER BY g.nome;

Outer Join: Trata os conceitos do Inner junto com os dados que não tem relação
nenhuma com a outra tabela.

8. Preferência a esquerda (Gafanhotos), que me retornará o nome de cada um e
se ele têm preferência ou não (de curso).
SELECT g.nome, c.nome, c.ano
FROM gafanhotos g LEFT OUTER JOIN cursos c  -- ou LEFT JOIN
ON (c.id = g.cursopreferido)
ORDER BY g.nome;

9. Preferência a direita (Cursos), terão repetições, já que cada gafanhoto pode
curtir um curso mas um curso pode ser curtido por vários gafanhotos.
SELECT g.nome, c.nome, c.ano
FROM gafanhotos g RIGHT OUTER JOIN cursos c  -- ou RIGHT JOIN
ON (c.id = g.cursopreferido)
ORDER BY c.nome;

10. Nesse exemplo, não há preferências, o que fará que se torne igual o LEFT,
já que me exibirá até os que não tem nenhuma preferência de curso
SELECT g.nome, c.nome, c.ano
FROM gafanhotos g FULL OUTER JOIN cursos c
ON (c.id = g.cursopreferido)
order by g.nome;
