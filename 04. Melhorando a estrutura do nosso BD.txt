Priori: Ao trabalharmos com tipos primitivos, sempre escolha o que ocupa
menos espaço.
    Ex: Smallint (2 bytes), Bigint (8)
    "Ah, mas a diferença é pouca..."
    Lembrando que é para cada registro, imagina que temos 1bi.

Para melhorar o que já criamos no arquivo anterior "03. DDL", precisamos remover
o existente e recriá-lo melhor.

1. Drop DB
DROP DATABASE <db_name>;

2. O Postgres seta todas as configurações abaixo por padrão, diferente do MySQL.
CREATE DATABASE <nome_banco>;
-- WITH OWNER postgres
-- ENCODING utf8
-- LC_COLLATE = pt_BR.UTF-8
-- LC_CTYPE = pt_BR.UTF-8;

3. Access DB
\c <nome_banco>

DICA: Nunca peça a idade do usuário. Caso contrário, teremos que ficar alterando
de ano em ano, então manipulamos esses dados através da programação com o nascto

Memorando: CONSTRAINT's são regras que definiremos para criação de coisas dentro
do nosso BD (NOT NULL/DEFAULT).

4. Criação da tabela
CREATE TYPE definicao AS ENUM ('M', 'F');
CREATE TABLE pessoas (
    nome varchar(30) NOT NULL,
    nascimento date,
    sexo definicao DEFAULT 'M',
    peso decimal(5, 2),  -- 5 serve para definir espaços, 2 números após a casa
    altura decimal(3, 2),
    nacionalidade varchar(20) DEFAULT 'Brasil'
);

Mas qual a diferença entre VAR e VarChar?
Se você definir que um atributo com tipo primitivo usará 100 caracteres, ele
ocupará todos, já o VarChar usará apenas o que você digitou.

> Criamos a tabela mas temos um grande problema, posso me
auto-cadastrar inúmeras vezes.
Pensando nisso, todos os BD relacionais possuem uma tratativa. CHAVE PRIMÁRIA!
Todas as tabelas devem ter, já que chaves primárias são únicas.
> Meu nome pode ter chave primária?
Não! Já que podem ter várias pessoas com o mesmo nome (homônimo), agora CPF/ID é
único para cada indivíduo, pois então...

5. Recriação com chave primária
-- Removendo a tabela criada previamente
DROP TABLE pessoas;
CREATE TYPE definicao AS ENUM ('M', 'F');
CREATE TABLE pessoas (
    -- O Postgre já possui um tipo primitivo que vêm com a constraint
    -- "AUTO-INCREMENT" já aplicada (SERIAL).
    id smallserial PRIMARY KEY,
    -- Será através do ID que identificaremos os registros na nossa
    -- tabela, então inserimos a CONSTRAINT primary key
    nome varchar(30) NOT NULL,
    nascimento date,
    sexo definicao DEFAULT 'M',
    peso decimal(5, 2),
    altura decimal(3, 2),
    nacionalidade varchar(20) DEFAULT 'Brasil'
);
